<?php
// autogenerated file 30.08.2007 09:37
// $Id$
// $Log$
//
require_once 'ExpressHistogramSortCodeType.php';
require_once 'UserIDType.php';
require_once 'ExpressDetailLevelCodeType.php';
require_once 'ExpressProductSortCodeType.php';
require_once 'ConditionSelectionCodeType.php';
require_once 'ExternalProductCodeType.php';
require_once 'AmountType.php';
require_once 'AbstractRequestType.php';
require_once 'ExpressItemSortCodeType.php';
require_once 'AffiliateTrackingDetailsType.php';

class GetSearchResultsExpressRequestType extends AbstractRequestType
{
	// start props
	// @var string $Query
	var $Query;
	// @var ExternalProductCodeType $ExternalProductIDType
	var $ExternalProductIDType;
	// @var string $ExternalProductIDValue
	var $ExternalProductIDValue;
	// @var long $ProductReferenceID
	var $ProductReferenceID;
	// @var string $DepartmentName
	var $DepartmentName;
	// @var string $AisleName
	var $AisleName;
	// @var string $ProductTypeName
	var $ProductTypeName;
	// @var ExpressHistogramSortCodeType $HistogramSort
	var $HistogramSort;
	// @var ExpressItemSortCodeType $ItemSort
	var $ItemSort;
	// @var ExpressProductSortCodeType $ProductSort
	var $ProductSort;
	// @var AmountType $HighestPrice
	var $HighestPrice;
	// @var AmountType $LowestPrice
	var $LowestPrice;
	// @var ConditionSelectionCodeType $Condition
	var $Condition;
	// @var UserIDType $SellerID
	var $SellerID;
	// @var string $PostalCode
	var $PostalCode;
	// @var ExpressDetailLevelCodeType $HistogramDetails
	var $HistogramDetails;
	// @var ExpressDetailLevelCodeType $ProductDetails
	var $ProductDetails;
	// @var ExpressDetailLevelCodeType $ItemDetails
	var $ItemDetails;
	// @var int $EntriesPerPage
	var $EntriesPerPage;
	// @var int $PageNumber
	var $PageNumber;
	// @var AffiliateTrackingDetailsType $AffiliateTrackingDetails
	var $AffiliateTrackingDetails;
	// end props

/**
 *

 * @return string
 */
	function getQuery()
	{
		return $this->Query;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setQuery($value)
	{
		$this->Query = $value;
	}
/**
 *

 * @return ExternalProductCodeType
 */
	function getExternalProductIDType()
	{
		return $this->ExternalProductIDType;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setExternalProductIDType($value)
	{
		$this->ExternalProductIDType = $value;
	}
/**
 *

 * @return string
 */
	function getExternalProductIDValue()
	{
		return $this->ExternalProductIDValue;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setExternalProductIDValue($value)
	{
		$this->ExternalProductIDValue = $value;
	}
/**
 *

 * @return long
 */
	function getProductReferenceID()
	{
		return $this->ProductReferenceID;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setProductReferenceID($value)
	{
		$this->ProductReferenceID = $value;
	}
/**
 *

 * @return string
 */
	function getDepartmentName()
	{
		return $this->DepartmentName;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setDepartmentName($value)
	{
		$this->DepartmentName = $value;
	}
/**
 *

 * @return string
 */
	function getAisleName()
	{
		return $this->AisleName;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setAisleName($value)
	{
		$this->AisleName = $value;
	}
/**
 *

 * @return string
 */
	function getProductTypeName()
	{
		return $this->ProductTypeName;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setProductTypeName($value)
	{
		$this->ProductTypeName = $value;
	}
/**
 *

 * @return ExpressHistogramSortCodeType
 */
	function getHistogramSort()
	{
		return $this->HistogramSort;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setHistogramSort($value)
	{
		$this->HistogramSort = $value;
	}
/**
 *

 * @return ExpressItemSortCodeType
 */
	function getItemSort()
	{
		return $this->ItemSort;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setItemSort($value)
	{
		$this->ItemSort = $value;
	}
/**
 *

 * @return ExpressProductSortCodeType
 */
	function getProductSort()
	{
		return $this->ProductSort;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setProductSort($value)
	{
		$this->ProductSort = $value;
	}
/**
 *

 * @return AmountType
 */
	function getHighestPrice()
	{
		return $this->HighestPrice;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setHighestPrice($value)
	{
		$this->HighestPrice = $value;
	}
/**
 *

 * @return AmountType
 */
	function getLowestPrice()
	{
		return $this->LowestPrice;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setLowestPrice($value)
	{
		$this->LowestPrice = $value;
	}
/**
 *

 * @return ConditionSelectionCodeType
 */
	function getCondition()
	{
		return $this->Condition;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setCondition($value)
	{
		$this->Condition = $value;
	}
/**
 *

 * @return UserIDType
 */
	function getSellerID()
	{
		return $this->SellerID;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setSellerID($value)
	{
		$this->SellerID = $value;
	}
/**
 *

 * @return string
 */
	function getPostalCode()
	{
		return $this->PostalCode;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPostalCode($value)
	{
		$this->PostalCode = $value;
	}
/**
 *

 * @return ExpressDetailLevelCodeType
 */
	function getHistogramDetails()
	{
		return $this->HistogramDetails;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setHistogramDetails($value)
	{
		$this->HistogramDetails = $value;
	}
/**
 *

 * @return ExpressDetailLevelCodeType
 */
	function getProductDetails()
	{
		return $this->ProductDetails;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setProductDetails($value)
	{
		$this->ProductDetails = $value;
	}
/**
 *

 * @return ExpressDetailLevelCodeType
 */
	function getItemDetails()
	{
		return $this->ItemDetails;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setItemDetails($value)
	{
		$this->ItemDetails = $value;
	}
/**
 *

 * @return int
 */
	function getEntriesPerPage()
	{
		return $this->EntriesPerPage;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setEntriesPerPage($value)
	{
		$this->EntriesPerPage = $value;
	}
/**
 *

 * @return int
 */
	function getPageNumber()
	{
		return $this->PageNumber;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setPageNumber($value)
	{
		$this->PageNumber = $value;
	}
/**
 *

 * @return AffiliateTrackingDetailsType
 */
	function getAffiliateTrackingDetails()
	{
		return $this->AffiliateTrackingDetails;
	}
/**
 *

 * @return void
 * @param  $value 
 */
	function setAffiliateTrackingDetails($value)
	{
		$this->AffiliateTrackingDetails = $value;
	}
/**
 *

 * @return 
 */
	function GetSearchResultsExpressRequestType()
	{
		$this->AbstractRequestType('GetSearchResultsExpressRequestType', 'urn:ebay:apis:eBLBaseComponents');
		$this->_elements = array_merge($this->_elements,
			array(
				'Query' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ExternalProductIDType' =>
				array(
					'required' => false,
					'type' => 'ExternalProductCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ExternalProductIDValue' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ProductReferenceID' =>
				array(
					'required' => false,
					'type' => 'long',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'DepartmentName' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'AisleName' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ProductTypeName' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'HistogramSort' =>
				array(
					'required' => false,
					'type' => 'ExpressHistogramSortCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ItemSort' =>
				array(
					'required' => false,
					'type' => 'ExpressItemSortCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ProductSort' =>
				array(
					'required' => false,
					'type' => 'ExpressProductSortCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'HighestPrice' =>
				array(
					'required' => false,
					'type' => 'AmountType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'LowestPrice' =>
				array(
					'required' => false,
					'type' => 'AmountType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'Condition' =>
				array(
					'required' => false,
					'type' => 'ConditionSelectionCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'SellerID' =>
				array(
					'required' => false,
					'type' => 'UserIDType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PostalCode' =>
				array(
					'required' => false,
					'type' => 'string',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'HistogramDetails' =>
				array(
					'required' => false,
					'type' => 'ExpressDetailLevelCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ProductDetails' =>
				array(
					'required' => false,
					'type' => 'ExpressDetailLevelCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'ItemDetails' =>
				array(
					'required' => false,
					'type' => 'ExpressDetailLevelCodeType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				),
				'EntriesPerPage' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'PageNumber' =>
				array(
					'required' => false,
					'type' => 'int',
					'nsURI' => 'http://www.w3.org/2001/XMLSchema',
					'array' => false,
					'cardinality' => '0..1'
				),
				'AffiliateTrackingDetails' =>
				array(
					'required' => false,
					'type' => 'AffiliateTrackingDetailsType',
					'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
					'array' => false,
					'cardinality' => '0..1'
				)
			));

	}
}
?>
